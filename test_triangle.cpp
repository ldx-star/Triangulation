//
// Created by ldx on 24-1-31.
//
#include<Eigen/Core>
#include<Eigen/SVD>
#include<iostream>

int main() {
    Eigen::Vector2d p1, p2; // 匹配的二维点
    p1(0) = 0.289986, p1(1) = -0.0355493;
    p2(0) = 0.316154, p2(1) = 0.0898488;

    Eigen::Matrix<double, 3, 4> M1, M2; // 投影矩阵
    M1(0, 0) = 0.919653;
    M1(0, 1) = -0.000621866;
    M1(0, 2) = -0.00124006;
    M1(0, 3) = 0.00255933;
    M1(1, 0) = 0.000609954;
    M1(1, 1) = 0.919607;
    M1(1, 2) = -0.00957316;
    M1(1, 3) = 0.0540753;
    M1(2, 0) = 0.00135482;
    M1(2, 1) = 0.0104087;
    M1(2, 2) = 0.999949;
    M1(2, 3) = -0.127624;

    M2(0, 0) = 0.920039;
    M2(0, 1) = -0.0117214;
    M2(0, 2) = 0.0144298;
    M2(0, 3) = 0.0749395;
    M2(1, 0) = 0.0118301;
    M2(1, 1) = 0.920129;
    M2(1, 2) = -0.00678373;
    M2(1, 3) = 0.862711;
    M2(2, 0) = -0.0155846;
    M2(2, 1) = 0.00757181;
    M2(2, 2) = 0.999854;
    M2(2, 3) = -0.0887441;

    Eigen::Matrix<double, 4, 4> A;
    A(0, 0) = p1(0) * M1(2, 0) - M1(0, 0);
    A(0, 1) = p1(0) * M1(2, 1) - M1(0, 1);
    A(0, 2) = p1(0) * M1(2, 2) - M1(0, 2);
    A(0, 3) = p1(0) * M1(2, 3) - M1(0, 3);
    A(1, 0) = p1(1) * M1(2, 0) - M1(1, 0);
    A(1, 1) = p1(1) * M1(2, 1) - M1(1, 1);
    A(1, 2) = p1(1) * M1(2, 2) - M1(1, 2);
    A(1, 3) = p1(1) * M1(2, 3) - M1(1, 3);

    A(2, 0) = p2(0) * M2(2, 0) - M2(0, 0);
    A(2, 1) = p2(0) * M2(2, 1) - M2(0, 1);
    A(2, 2) = p2(0) * M2(2, 2) - M2(0, 2);
    A(2, 3) = p2(0) * M2(2, 3) - M2(0, 3);
    A(3, 0) = p2(1) * M2(2, 0) - M2(1, 0);
    A(3, 1) = p2(1) * M2(2, 1) - M2(1, 1);
    A(3, 2) = p2(1) * M2(2, 2) - M2(1, 2);
    A(3, 3) = p2(1) * M2(2, 3) - M2(1, 3);

    Eigen::Vector3d P;
    Eigen::JacobiSVD<Eigen::MatrixXd> svd(A, Eigen::ComputeFullV | Eigen::ComputeFullU);
    auto V = svd.matrixV();
//    std::cout << V << std::endl;
    P(0) = V(0,3) / V(3,3);
    P(1) = V(1,3) / V(3,3);
    P(2) = V(2,3) / V(3,3);

    std::cout<<" trianglede point is :"<<P(0)<<" "<<P(1)<<" "<<P(2)<<std::endl;
    std::cout<<" the result should be "<<"2.14598 -0.250569 6.92321\n"<<std::endl;
    return 0;
}